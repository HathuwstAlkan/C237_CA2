<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>C237 E66D-04-Team1 Bookstore</title>
    <!-- Link to Google Fonts - Lora and Nunito Sans -->
    <link href="https://fonts.googleapis.com/css2?family=Lora:wght@400;700&family=Nunito+Sans:wght@300;400;600;700&display=swap" rel="stylesheet">
    <!-- Link to Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Link to your custom CSS file -->
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <!-- Full Background Image Container -->
    <div class="full-background"></div>

    <!-- Main Content Wrapper (Responsive) -->
    <div class="container-fluid content-wrapper p-0">
        <div class="row w-100 h-100 g-0">
            <!-- Left Column (for desktop) / Top Section (for mobile) -->
            <div class="col-md-8 top-section">
                <h1 class="mb-4 display-3">Welcome to RP Bookstore</h1>
                <!-- This p tag will be the static text for mobile, and hidden on desktop -->
                <p class="lead static-text-slogan">Discover your next favorite book with us!</p>
                <!-- This p tag will be the typewriter for desktop, and hidden on mobile -->
                <p class="lead typewriter-container">
                    <span id="typewriter-subtitle" class="typewriter-text"></span>
                </p>
                <% if (messages && messages.length > 0) { %>
                    <div class="alert alert-success w-75 mx-auto mt-4" role="alert">
                        <% messages.forEach(function(message) { %>
                            <p class="mb-0"><%= message %></p>
                        <% }); %>
                    </div>
                <% } %>
            </div>

            <!-- Right Column (for desktop) / Bottom Section (for mobile) -->
            <div class="col-md-4 login-register-frame">
                <!-- This area will dynamically load login/register forms -->
                <div id="auth-form-area" class="w-100">
                    <!-- Initial buttons will be loaded here by JS -->
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Custom JavaScript for AJAX form loading and Typewriter -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const authFormArea = document.getElementById('auth-form-area');
            const subtitleElement = document.getElementById('typewriter-subtitle');
            const staticTextSloganElement = document.querySelector('.static-text-slogan');

            // Initial content for the right frame (Login/Sign Up buttons)
            const initialButtonsHTML = `
                <div class="card w-100">
                    <div class="card-body p-4 text-center">
                        <h2 class="card-title mb-4">Access Your Account</h2>
                        <div class="d-grid gap-3 mb-4">
                            <a href="#" id="showLoginBtn" class="btn btn-outline-custom">Login</a>
                            <a href="#" id="showRegisterBtn" class="btn btn-outline-custom">Sign Up</a>
                        </div>
                        <p class="card-text">New here? Sign up now!</p>
                    </div>
                </div>
            `;

            // Function to load a form partial
            async function loadForm(formType) {
                try {
                    const response = await fetch(`/partials/${formType}`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const html = await response.text();

                    authFormArea.innerHTML = html;

                    const backButton = document.getElementById('backToMainButtons');
                    if (backButton) {
                        backButton.addEventListener('click', showInitialButtons);
                    }

                    const form = document.getElementById(`${formType}Form`);
                    if (form) {
                        form.addEventListener('submit', handleFormSubmission);
                    }

                } catch (error) {
                    console.error(`Error loading ${formType} form:`, error);
                    authFormArea.innerHTML = `<p class="text-danger">Failed to load form. Please try again.</p>`;
                }
            }

            // Function to show the initial Login/Sign Up buttons
            function showInitialButtons() {
                authFormArea.innerHTML = initialButtonsHTML;
                document.getElementById('showLoginBtn').addEventListener('click', (e) => {
                    e.preventDefault();
                    loadForm('login');
                });
                document.getElementById('showRegisterBtn').addEventListener('click', (e) => {
                    e.preventDefault();
                    loadForm('register');
                });
            }

            // Handle form submission via AJAX
            async function handleFormSubmission(event) {
                event.preventDefault();

                const form = event.target;
                const formData = new URLSearchParams(new FormData(form)).toString();
                const formMessagesDivId = form.id === 'loginForm' ? 'login-messages' : 'register-messages';
                const formMessagesDiv = document.getElementById(formMessagesDivId);

                formMessagesDiv.innerHTML = '';

                try {
                    const response = await fetch(form.action, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded'
                        },
                        body: formData
                    });

                    const result = await response.json();

                    if (result.success) {
                        const successHtml = `<div class="alert alert-success">${result.message}</div>`;
                        formMessagesDiv.innerHTML = successHtml;
                        setTimeout(() => {
                            window.location.href = result.redirectUrl;
                        }, 1000);
                    } else {
                        const errorHtml = `<div class="alert alert-danger">${result.errors.map(e => `<p>${e}</p>`).join('')}</div>`;
                        formMessagesDiv.innerHTML = errorHtml;

                        if (form.id === 'registerForm' && result.formData) {
                            for (const key in result.formData) {
                                const input = form.elements[key];
                                if (input) {
                                    input.value = result.formData[key];
                                }
                            }
                        }
                    }
                } catch (error) {
                    console.error('Form submission error:', error);
                    formMessagesDiv.innerHTML = `<div class="alert alert-danger">An unexpected error occurred. Please try again.</div>`;
                }
            }


            // Typewriter Effect JavaScript (only runs for desktop view)
            if (window.matchMedia("(min-width: 768px)").matches) {
                // Hide static text on desktop
                if (staticTextSloganElement) {
                    staticTextSloganElement.style.display = 'none';
                }

                const taglines = [
                    "Discover your next favorite book with us!",
                    "We sell books.",
                    "Where words come alive.",
                    "Find the perfect read for every mood.",
                    "Read, dream, repeat."
                ];
                let taglineIndex = 0;
                let charIndex = 0;
                let isDeleting = false;
                let typingSpeed = 100;
                let deletingSpeed = 20;
                let delayBetweenTaglines = 3000;

                function typeWriterLoop() {
                    const currentTagline = taglines[taglineIndex];

                    if (isDeleting) {
                        subtitleElement.innerHTML = currentTagline.substring(0, charIndex - 1);
                        charIndex--;
                        if (charIndex === 0) {
                            isDeleting = false;
                            taglineIndex = (taglineIndex + 1) % taglines.length;
                            subtitleElement.classList.remove('typewriter-blink');
                            setTimeout(typeWriterLoop, delayBetweenTaglines);
                        } else {
                            setTimeout(typeWriterLoop, deletingSpeed);
                        }
                    } else {
                        subtitleElement.innerHTML = currentTagline.substring(0, charIndex + 1);
                        charIndex++;
                        if (charIndex === currentTagline.length) {
                            isDeleting = true;
                            setTimeout(typeWriterLoop, delayBetweenTaglines);
                        } else {
                            setTimeout(typeWriterLoop, typingSpeed);
                        }
                    }

                    if (!isDeleting || charIndex > 0) {
                        subtitleElement.classList.add('typewriter-blink');
                    } else {
                        subtitleElement.classList.remove('typewriter-blink');
                    }
                }

                typeWriterLoop(); // Start the loop for desktop
            } else {
                // For mobile, ensure typewriter text is empty and static text is visible
                subtitleElement.innerHTML = '';
                subtitleElement.classList.remove('typewriter-blink');
                // Ensure static text is visible on mobile (default CSS handles this, but explicit here)
                if (staticTextSloganElement) {
                    staticTextSloganElement.style.display = 'block'; // Or 'inherit'
                }
            }

            // Show initial buttons when the page loads
            showInitialButtons();
        });
    </script>
</body>
</html>
